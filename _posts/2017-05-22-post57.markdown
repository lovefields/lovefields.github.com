---
layout: post
title:  "String 클래스"
date:   2017-05-22 12:00:00 +0900
author: 민갤
description: java.lang 패키지 – String 클래스
keywords : android,java,androidstudio,method,선언,class,요소,언어,자바의 정석,프로그래밍,java.lang,패키지,String 
image : /img/java.png
category : android
---
<div><strong class="h2">java.lang 패키지</strong></div>
<div>자바프로그래밍에 가장 기본이 되는 클래스들을 포함하고 있다.</div>
<br>
<br>
<br>

<div><strong class="h2">String 클래스</strong></div>
<div>문자열을 저장하고 이를 다루는 데 필요한 메서드를 제공한다.</div>
<br>
<br>

<div><strong>변경 불가능한(Immutable) 클래스</strong></div><p></p>
<div>문자열을 저장하기 위해서 문자형 배열 변수 value를 인스턴스 변수로 정의하고 있다.</div>
{% highlight java %}
public final class String implements java.io.Serializable, Comparable{
    private char[] value;
    ...
{% endhighlight %}
<br>
<br>

<div><strong>문자열 결합</strong></div><p></p>
<div>&#149;&nbsp; 덧셈연산자 +</div>
<div>&nbsp; &nbsp; 연산 시 마다 새로운 문자열을 가진 String 인스턴스가 생성되어 메모리 공간을 차지한다.</div>
<div>&nbsp; &nbsp; 가능한 결합횟수를 줄이는 것이 좋다.</div>
{% highlight java %}
String a = "a";
String b = "b";
String a = a + b;
{% endhighlight %}<p></p>

||a|b|
|:-:|:-:|:-:|
|결합 전|0x100|0x200|
|결합 후|0x300|0x200|

<div>&#149;&nbsp; StringBuffer 클래스</div>
<div>&nbsp; &nbsp; 문자열간의 결합이나 추출 등 문자열을 다루는 작업이 많이 필요한 경우 사용한다.</div>
<br>
<br>

<div><strong>문자열의 비교</strong></div><p></p>
<div>문자열 리터럴은 이미 존재하는 것을 재사용한다.</div>
{% highlight java %}
String str1 = "a";
String str2 = "a";
{% endhighlight %}

|0x100|str1|str2|
|:-:|:-:|:-:|
|a|0x100|0x100|

<div>생성자를 이용하면 new 연산자에 의해 메모리 할당이 이루어져 항상 새로운 String 인스턴스가 생성된다.</div>
{% highlight java %}
String str1 = new String("a");
String str2 = new String("a");
{% endhighlight %}

|0x100|str1|
|:-:|:-:|
|a|0x100|

|0x200|str2|
|:-:|:-:|
|a|0x200|

<br>
<br>

<div><strong>문자열 리터럴</strong></div><p></p>
<div>String 인스턴스.</div>
<div>같은 내용의 문자열 리터럴은 한 번만 저장된다.</div>
<div>하나의 인스턴스를 공유하기 때문에 한 번 생성하면 내용을 변경할 수 없다.</div>
<div>컴파일 시에 클래스 파일에 저장된다.</div>
<br>
<br>

<div><strong>빈 문자열 Empty String</strong></div><p></p>
{% highlight java %}
String str = "";
{% endhighlight %}<p></p>
<div>str이 참조하고 있는 String 인스턴스 내부에 'new char[0]'과 같이 길이가 0인 char형 배열을 저장하고 있다.</div>
{% highlight java %}
char[] chArr = new char[0];
{% endhighlight %}<p></p>
<div>String은 참조형 타입의 기본값이 null보다 빈 문자열로, char형은 기본값인 \u0000 대신 공백으로 초기화하는 것이 보통이다.</div>
{% highlight java %}
String str = "";
char c = ' ';
{% endhighlight %}
<br>
<br>
<br>

<div><strong class="h2">String 클래스의 생성자와 메서드</strong></div>
<br>
<br>

<div><strong>String(String original)</strong></div>
<div>주어진 문자열(original)을 갖는 String 인스턴스를 생성.</div>
{% highlight java %}
String str = new String("Love");       // "Love"
{% endhighlight %}
<br>

<div><strong>String(char[] value)</strong></div>
<div>주어진 문자열(value)을 갖는 String 인스턴스를 생성.</div>
{% highlight java %}
char[] c = {L, o, v, e};
String str = new String(c);            // "Love"
{% endhighlight %}
<br>

<div><strong>String(StringBuffer buffer)</strong></div>
<div>StringBuffer 인스턴스가 갖고 있는 문자열과 같은 내용의 String 인스턴스를 생성.</div>
{% highlight java %}
StringBuffer sb = new StringBuffer("Love");
String str = new String(sb);           // "Love"
{% endhighlight %}
<br>

<div><strong>char charAt(int index)</strong></div>
<div>지정된 위치(index. 0~)에 있는 문자를 알려준다.</div>
{% highlight java %}
String str = "Love";
char c = str.charAt(1);                // 'o'
{% endhighlight %}
<br>

<div><strong>int compareTo(String anotherString)</strong></div>
<div>문자열(anotherString)과 사전순서로 비교한다. 사전 순으로 이전이면 음수, 같으면 0, 이후면 양수를 반환한다.</div>
{% highlight java %}
int i0 = "a".compareTo("a");           // 0;
int i1 = "a".compareTo("b");           // -1;
int i2 = "b".compareTo("a");           // 1;
{% endhighlight %}
<br>

<div><strong>String concat(String str)</strong></div>
<div>문자열(str) 뒤에 덧붙인다.</div>
{% highlight java %}
String str1 = "Love";
String str2 = str1.concat("field");     // "Lovefield"
{% endhighlight %}
<br>

<div><strong>boolean contains(CharSequence s)</strong></div>
<div>지정된 문자열(s)이 포함되었는지 검사한다.</div>
{% highlight java %}
String str = "Love";
boolean b = str.contains("v");         // true
{% endhighlight %}
<br>

<div><strong>boolean endsWith(Strig suffix)</strong></div>
<div>지정된 문자열(suffix)로 끝나는 지 검사한다.</div>
{% highlight java %}
String str = "Love";
boolean b = str.endsWith("a");         // false
{% endhighlight %}
<br>

<div><strong>boolean equals(Object anObject)</strong></div>
<div>매개변수로 받은 문자열(anObject)과 Stirng 인스턴스의 문자열을 비교한다.</div>
<div>obj가 String이 아니거나 문자열이 다르면 false를 반환한다.</div>
{% highlight java %}
String str = "Love";
boolean b1 = str.equals("love");        // false
boolean b2 = str.equals("lo");          // false
{% endhighlight %}
<br>

<div><strong>boolean equalsIgnoreCase(String anotherString)</strong></div>
<div>문자열과 String 인스턴스의 문자열을 대소문자 구분 없이 비교한다.</div>
{% highlight java %}
String str = "Love";
boolean b = str.equalsIgnoreCase("love");    // true
{% endhighlight %}
<br>

<div><strong>byte[] getBytes(String charsetName)</strong></div>
<div>문자열의 문자 인코딩을 다른 인코딩으로 변경한다.</div>
{% highlight java %}
try {
    byte[] utf8 = "가".getBytes("UTF-8");    // EA, B0, 80
    String str = new String(utf8, "UTF-8");  // 가
} catch (UnsupportedEncodingException e) {
    e.printStackTrace();
}
{% endhighlight %}
<br>

<div><strong>int indexOf(int ch)</strong></div>
<div>주어진 문자(ch)가 문자열에 존재하는 지 확인하여 위치(index)를 알려준다. 못 찾으면 -1을 반환한다.</div>
{% highlight java %}
String str = "Love";
int ido = str.indexOf('v');            // 2
{% endhighlight %}
<br>

<div><strong>int indexOf(int ch, int fromIndex)</strong></div>
<div>주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(fromIndex)부터 확인하여 위치(index)를 알려준다. 못 찾으면 -1을 반환한다.</div>
{% highlight java %}
String str = "Love";
int ido1 = str.indexOf("v", 2);         // 2 
int ido2 = str.indexOf("v", 3);         // -1
{% endhighlight %}
<br>

<div><strong>int indexOf(String str)</strong></div>
<div>주어진 문자열이 존재하는 지 확인하여 그 위치(index)를 알려준다. 없으면 -1을 반환한다.</div>
{% highlight java %}
String str = "abcdefg";
int id = str.indexOf("cd");            // 2
{% endhighlight %}
<br>

<div><strong>String intern()</strong></div>
<div>문자열을 상수풀(constant pool)에 등록한다.</div>
<div>이미 상수풀에 같은 내용의 문자열이 있을 경우 그 문자열의 주소값을 반환한다.</div>
{% highlight java %}
String s1 = new String("love");
String s2 = new String("love");

boolean b1 = (s1 == s2);                    // false
boolean b2 = s1.equals(s2);                 // true
boolean b3 = (s1.intern() == s2.intern());  // true
{% endhighlight %}
<br>

<div><strong>int lastIndexOf(int ch)</strong></div>
<div>지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다. 못 찾으면 -1을 반환한다.</div>
{% highlight java %}
String s = "lovefields.github.io";
int lio1 = s.lastIndexOf('.');          // 17
int lio2 = s.indexOf('.');              // 10
{% endhighlight %}
<br>

<div><strong>int length()</strong></div>
<div>문자열의 길이를 알려준다.</div>
{% highlight java %}
String s = "lovefields.github.io";
int l = s.length();                    // 20
{% endhighlight %}
<br>

<div><strong>String replace(CharSequence target, CharSequence replacement)</strong></div>
<div>문자열 중의 문자열(target)를 새로운 문자열(replacement)로 모두 바꾼 문자열을 반환한다.</div>
{% highlight java %}
String s1 = "lovelove";
String s2 = s1.replace("ve", "ol");    // "loollool"
{% endhighlight %}
<br>

<div><strong>String replace(char oldChar, char newChar)</strong></div>
<div>문자열 중의 문자(oldChar)를 새로운 문자(newChar)로 바꾼 문자열을 반환한다.</div>
{% highlight java %}
String s1 = "love";
String s2 = s1.replace('l', 'L');      // "Love"
{% endhighlight %}
<br>

<div><strong>String replaceAll(String regex, String replacement)</strong></div>
<div>문자열 중에서 지정된 문자열(regex)과 일치하는 것을 새로운 문자열(replacement)로 모두 변경한다.</div>
{% highlight java %}
String s1 = "lovelove";
String s2 = s1.replaceAll("ve", "ol");      // "loollool"
{% endhighlight %}
<br>

<div><strong>String replaceFirst(String regex, String replacement)</strong></div>
<div>문자열 중에서 지정된 문자열(regex)과 일치하는 것 중, 첫 번째 것만 새로운 문자열로 변경한다.</div>
{% highlight java %}
String s1 = "lovelove";
String s2 = s1.replaceFirst("ov", "if");    // "lifelove"
{% endhighlight %}
<br>

<div><strong>String[] split(String regex)</strong></div>
<div>문자열을 지정된 분리자로 나누어 문자열 배열에 담아 반환한다.</div>
{% highlight java %}
String animals = "dog,cat,bear,wolf";
String[] arr = animals.split(",");     // arr[0] = dog, arr[1] = cat, arr[2] = bear, arr[3] = wolf
{% endhighlight %}
<br>

<div><strong>String[] split(String regex, int limit)</strong></div>
<div>문자열을 지정된 분리자로 나누되, 문자열 전체를 지정된 수로 잘라 문자열 배열에 담아 반환한다.</div>
{% highlight java %}
String animals = "dog,cat,bear,wolf";
String[] arr = animals.split("," , 2);      // arr[0] = dog, arr[1] = cat,bear,wolf
String[] arr = animals.split("," , 3);      // arr[0] = dog, arr[1] = cat, arr[2] = bear,wolf
{% endhighlight %}<p></p>
<div>&#149;&nbsp; join(CharSuquence delimiter, Object[] token)</div>
<div>&nbsp; &nbsp; 여러 문자열 사이에 구분자를 넣어서 결합한다.</div>
<div>&nbsp; &nbsp; 구분자로 문자열을 가르는 split()과 반대의 작업을 한다.</div>
<div>&nbsp; &nbsp; JDK1.8부터 추가.</div>
{% highlight java %}
String[] animals = {"dog", "cat", "wolf"};
String str = TextUtils.join("-", animals);      //dog-cat-wolf
{% endhighlight %}
<br>

<div><strong>boolean startsWith(String prefix)</strong></div>
<div>주어진 문자열로 시작하는 지 검사한다.</div>
{% highlight java %}
String s = "lovefields.github.io";
boolean b = s.startsWith("github");    // false
{% endhighlight %}
<br>

<div><strong>String substring(int beginIndex)</strong></div>
<div><strong>substring(int beginIndex, int endIndex)</strong></div>
<div>주어진 시작위치(beginIndex)부터 끝 위치(endIndex) 범위에 포함된 문자열을 얻는다.</div>
<div>시작 위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다. (begin <= x < end)</div>
{% highlight java %}
String s = "lovefields.github.io";
String ss1 = s.substring(4);           // "fields.github.io"
String ss2 = s.substring(4, 9);        // "field"
{% endhighlight %}
<br>

<div><strong>String toLowerCase()</strong></div>
<div>String 인스턴스에 저장되어 있는 모든 문자열을 소문자로 변환하여 반환한다.</div>
{% highlight java %}
String s = "loveFIELDs.GitHUb.Io";
String tl = s.toLowerCase();           // "lovefields.github.io"
{% endhighlight %}
<br>

<div><strong>String toString()</strong></div>
<div>String 인스턴스에 저장되어 있는 문자열을 반환한다.</div>
{% highlight java %}
String s = "Love";
String ts = s.toString();              // "Love"
{% endhighlight %}
<br>

<div><strong>String toUpperCase()</strong></div>
<div>String 인스턴스에 저장되어있는 모든 문자열을 대문자로 변환하여 반환한다.</div>
{% highlight java %}
String s = "loveFIELDs.GitHUb.Io";
String tu = s.toUpperCase();           // "LOVEFIELDS.GITHUB.IO"
{% endhighlight %}
<br>

<div><strong>String trim()</strong></div>
<div>문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다.</div>
<div>문자열 중간에 있는 공백은 제거되지 않는다.</div>
{% highlight java %}
String s = " Love Field ";
String result = s.trim();              // "Love Feild"
{% endhighlight %}
<br>

<div><strong>valueOf()</strong></div>
<div>기본형 값을 String으로 변환.</div>
<div>주어진 값을 문자열로 변환하여 반환한다.</div>
<div>참조 변수의 경우, toString()을 호출한 결과를 반환한다.</div>
<div>빈 문자열""을 더하는 방법이 더 간단하고 편하기 때문에 성능향상이 필요한 경우에만 사용한다.</div>
{% highlight java %}
static String valueOf(boolean b)
static String valueOf(double d)
static String valueOf(char[] data, int offset, int count)
static String valueOf(float f)
static String valueOf(int i)
static String valueOf(char c)
static String valueOf(long l)
static String valueOf(Object o)
static String valueOf(char[] data)
{% endhighlight %}
{% highlight java %}
String b = String.valueOf(true);       // true
String d = String.valueOf(10.0);       // 10.0

char[] arr = new char[] { 'l', 'o', 'v', 'e' };
String ca1 = String.valueOf(arr, 1, 2);     // ov

String f = String.valueOf(10f);        // 10.0
String i = String.valueOf(2);          // 2
String c = String.valueOf('l');        // 1
String l = String.valueOf(1043L);      // 10431

Date date = new Date();
String o = String.valueOf(date);       // Mon May 22 16:26:36 KST 2017

String ca2 = String.valueOf(arr);      // love
{% endhighlight %}<p></p>
<div>&#149;&nbsp; String을 기본형 값으로 변환하기</div>
<div>&nbsp; &nbsp; <strong>타입.parse타입() ,&nbsp; valueOf()</strong></div>
<div>&nbsp; &nbsp; 메서드의 이름을 통일하기 위해 valueOf()가 나중에 추가되었다.
<div>&nbsp; &nbsp; <span class="red">두 메서드는 반환 타입만 다를 뿐 같은 메서드</span>다.</div>
<div>&nbsp; &nbsp; parse타입()은 문자열에 공백이나 문자가 포함되어 있는 경우,</div>
<div>&nbsp; &nbsp; 변환 시 예외(NumberFormatException)가 발생할 수 있기 때문에 trim()과 같이 사용하는 것이 좋다.</div>
<div>&nbsp; &nbsp; parse타입은 부호(+)나, 소수점(.), 자료형 접미사는 자료형에 알맞은 변환을 하는 경우에 사용 가능하다.</div>
{% highlight java %}
Boolean.parseBoolean(String s)
Byte.parseByte(String s)
Short.parseShort(String s)
Integer.parseInt(String s)
Long.parseLong(String s)
Float.parseFloat(String s)
Double.parseDouble(String s)
{% endhighlight %}<p></p>
<div>&nbsp; &nbsp; Integer.valueOf()는 반환 타입이 Integer지만 오토박싱에 의해 int로 자동 변환된다.</div>
<br>
<br>
<br>








참고 서적: 자바의 정석 3판
