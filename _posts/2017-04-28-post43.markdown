---
layout: post
title:  "객체지향 프로그래밍 - Method 01"
date:   2017-04-28 12:00:00 +0900
author: 민갤
description: JAVA 객체지향 프로그래밍03 - Method
keywords : android,java,androidstudio,method,선언,class,요소,언어,자바의 정석,프로그래밍,메모리,JVM,memory,Method
image : /img/java.png
category : android
---

<div><strong class="h2">메서드 Method</strong></div><p></p>

<div>특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것</div><br>

<div><strong>기능</strong></div><p></p>
<div>&#149;&nbsp; 블랙박스 black box</div>
<div>&nbsp; &nbsp; 내부적으로 어떻게 동작하는 지 몰라도 메서드에 넣을 값과 반환되는 결과만 알면 사용할 수 있다.</div><p></p>
<div>&#149;&nbsp; 재사용성 reusability</div>
<div>&nbsp; &nbsp; 한 번 만들어 놓은 메서드는 몇 번이고 호출할 수 있으며, 다른 프로그램에서도 사용 가능하다.</div><p></p>
<div>&#149;&nbsp; 중복된 코드 제거</div>
<div>&nbsp; &nbsp; 반복되는 문장들을 묶어서 하나의 메서드로 작성해 놓으면,</div>
<div>&nbsp; &nbsp; 반복되는 문장들 대신 메서드를 호출하는 한 문장으로 대체할 수 있다.</div><p></p>
<div>&#149;&nbsp; 프로그램의 구조화</div>
<div>&nbsp; &nbsp; 문장들을 작업단위로 나눠서 여러 개의 메서드에 담아 프로그램의 구조를 단순화시킬 수 있다.</div>
<br>
<br>

<div><strong>메서드 선언부 method declaration, method header</strong></div><p></p>
<div>메서드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는 지에 대한 정보를 제공</div>
{% highlight java %}
public returnType methodName(type parameter)
{% endhighlight %}<br>

<div>&#149;&nbsp; 반환 타입 return type</div>
<div>&nbsp; &nbsp; 메서드의 작업 수행 결과(반환값 return value)의 타입을 적는다.</div>
<div>&nbsp; &nbsp; 참조형일 경우, 객체의 주소값을 주고 받는 다.</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        Variables v1 = new Variables();
        v1.iv = 2;
        Log.d("TAG", "v1.iv: " + v1.iv);	 // v1.iv: 2

        Variables v2 = method(v1);
        Log.d("TAG", "v2.iv: " + v2.iv);	 // v2.iv: 2
    }

    public Variables method(Variables v) {
        return v;
    }
}

public class Variables {
    int iv;
}
{% endhighlight %}<p></p>

<div>&#149;&nbsp; 메서드의 이름 method name</div>
<div>&nbsp; &nbsp; 변수의 명명규칙대로 작성한다.</div>
<div>&nbsp; &nbsp; 이름만으로 메서드의 기능을 알 수 있도록 함축적이면서도 의미 있게 짓는 것이 좋다.</div><p></p>

<div>&#149;&nbsp; 매개변수 선언 parameter declaration</div>
<div>&nbsp; &nbsp; <strong class="blue">매개변수</strong>: 메서드가 작업을 수행하는 데 필요한 값들을 제공받기 위한 것.</div>
<div>&nbsp; &nbsp; 값을 입력 받을 필요가 없다면 괄호 안을 비워도 된다.</div>
<div>&nbsp; &nbsp; 두 변수의 타입이 같아도 변수의 타입을 생략할 수 없다.</div> 

{% highlight java %}
void methodName (int lv1, int lv2){ }
void methodName (int lv1, lv2){ }      // error
{% endhighlight %}<p></p>
<br>
<br>

<div><strong>메서드 구현부 method body {}</strong></div> <p></p> 
<div>메서드를 호출했을 때 수행될 문장들을 넣는다.</div>
{% highlight java %}
public returnType methodName(type parameter){
    return returnValue;
}
{% endhighlight %}<p></p>

<div>&#149;&nbsp; return문</div>
<div>&nbsp; &nbsp; 호출한 메서드로 반환값을 전달한다.</div>
<div>&nbsp; &nbsp; 메서드의 반환타입이 'void'가 아닌 경우, 구현부 안에 'return 반환값'이 반드시 포함되어야 한다.</div>
<div>&nbsp; &nbsp; 반환값의 타입은 반환타입과 일치하거나 자동 형변환이 가능한 것이어야 한다.</div>
<div>&nbsp; &nbsp; if-else문을 사용할 때 항상 결과값이 반환되도록 해야 한다.</div>
{% highlight java %}
int methodName(int lv){
	if(lv>0) return lv;
	else return 0;
}
{% endhighlight %}<p></p>

<div>&#149;&nbsp; 반환값 return value</div>
<div>&nbsp; &nbsp; 주로 변수.</div>
<div>&nbsp; &nbsp; 수식을 사용할 경우, 수식을 계산한 결과가 반환된다.</div>
{% highlight java %}
int methodName(int lv1, int lv2){
	return lv1 + lv2;
}
{% endhighlight %}<p></p>

<div>&#149;&nbsp; 지역변수</div>
<div>&nbsp; &nbsp; 서로 다른 메서드라면 같은 이름의 변수를 선언할 수 있다.</div>
{% highlight java %}
int methodNameOne(int lv){
	return lv;
}

int methodNameTow(int lv){
	return lv;
}
{% endhighlight %}
<br>
<br>

<div><strong>메서드 호출</strong></div><p></p>

{% highlight java %}
methodName(argument1, argument2, ...);	
{% endhighlight %}<p></p>
<div>특정 위치에 저장되어 있는 명령들을 수행한다.</div>
<div>메서드를 호출해야만 구현부의 문장들이 수행된다.</div>

{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        methodName(3);
    }

    public int methodName(int lv){
	return lv;
    }
}			
{% endhighlight %}<p></p>
<div>&#149;&nbsp; <strong class="blue">인자 / 인수 argument</strong></div>
<div>&nbsp; &nbsp; 메서드 호출 시 괄호()안에 지정한 값.</div>
<div>&nbsp; &nbsp; 매개변수에 대입되는 값.</div>
<div>&nbsp; &nbsp; 인자의 개수와 순서는 호출된 메서드에 선언된 매개변수와 일치해야 한다.</div>
<div>&nbsp; &nbsp; 매개변수의 타입과 일치하거나 자동 형변환이 가능해야 한다.</div><p></p>

<div>&#149;&nbsp; 메서드의 실행 흐름</div>
<div>&nbsp; &nbsp; 메서드가 호출되면 지금까지 실행 중이던 메서드는 잠시 실행을 멈추고 호출된 메서드의 문장들을 실행한다.</div>
<div>&nbsp; &nbsp; 같은 클래스 내의 메서드끼리는 참조변수를 사용하지 않고 서로 호출이 가능하다.</div>
<div>&nbsp; &nbsp; static 메서드는 같은 클래스 내의 인스턴스 메서드를 호출할 수 없다.</div>
<br>
<br>

<div><strong>매개변수의 유효성 검사</strong></div><p></p>
<div>메서드의 구현부를 작성할 때 매개변수의 값이 적절한 것인지 확인하는 것.</div>
<div>메서드 호출 시 적절치 못한 값을 입력할 수 있기 때문에 가능한 모든 경우의 수에 대해 고민하고 그에 대비한 코드를 작성해야 한다.</div><p></p>

<div>적절하지 않은 값이 매개변수를 통해 넘어온다면 매개변수의 값을 보정하거나, </div>
<div>보정하는 것이 불가능하다면 return문을 사용해 작업을 중단하고 호출한 메서드로 돌아간다.</div>
{% highlight java %}
int methodName(int lv1, int lv2){
	
	if(lv2 == 0){
		return 0;
	}

	return lv1 / lv2;
}
{% endhighlight %}
<br>
<br>
	 
<div><strong>메서드 사용</strong></div><p></p>
<div>&#149;&nbsp; 중복 상태</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        for (int i = 0; i < 10; i++) {
            i = i + 3;
        }

	...

        for (int i = 0; i < 10; i++) {
            i = i + 3;
        }
    }
}
{% endhighlight %}<br>

<div>&#149;&nbsp; 메서드 사용</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        method2();

	...

        method2();
    }

    public void method2() {
        for (int i = 0; i < 10; i++) {
            i = i + 3;
        }
    }
}
{% endhighlight %}
<br>
<br>
<br>

<div><strong class="h2">매개변수</strong></div>
<br>

<div><strong>기본형  매개변수</strong></div><p></p>
<div>변수의 값을 읽기만 한다.</div>
<div>원본이 아닌 복사본이 변경된 것이라 원본에는 아무런 영향을 미치지 못한다.</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        Variables v = new Variables();
        v.iv = 2;

        method(v.iv);
        Log.d("TAG", "v.iv: " + v.iv);	  // v.iv: 2
    }

    public void method(int iv) {
        iv = 10;
    }
}

public class Variables {
    int iv;
} 
{% endhighlight %}<p></p>

||v|0x100|
|:-:|:-:|:-:|
|value|0x100|2|

|iv|인자 대입|메소드 실행|작업 완료|
|:-:|:-:|:-:|:-:|
|method|2|10||
|onCreate|2|2|2|

<br>

<div><strong>참조형  매개변수</strong></div><p></p>
<div>주소 값을 받기 때문에 변수의 값을 읽고 변경할 수 있다.</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    ...

        Variables v = new Variables();
        v.iv = 2;

        method(v);
        Log.d("TAG", "v.iv: " + v.iv);	  // v.iv: 10
    }

    public void method(Variables V) {
        V.iv = 10;
    }
}
{% endhighlight %}<p></p>

||v|0x100|
|:-:|:-:|:-:|
|value|0x100|2 → 10|

|iv|인자 대입|메소드 실행|작업 완료|
|:-:|:-:|:-:|:-:|:-:|
|method|2|10||
|onCreate|2|10|10|

<br>
<div>&#149;&nbsp; 간단한 처리는 배열을 이용</div>
<div>&nbsp; &nbsp; 암시적으로 간단히 처리할 때는 별도의 클래스를 선언하지 않고 배열을 이용할 수도 있다.</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    ...

        int[] a = {0, 0};

        method(a);			    // method() a[0]: 10
        Log.d("TAG", "a[0]: " + a[0]);	    // a[0]: 10
    }

    public void method(int[] a) {
        a[0] = 10;
        Log.d("TAG", "method() a[0]: " + a[0]);
    }
} 
{% endhighlight %}<br>

<div>&#149;&nbsp; 활용</div>
<div>&nbsp; &nbsp; 반환값이 없어도 메서드의 실행결과를 얻어오거나, 여러 개의 값을 반환받는 것과 같은 효과를 얻어올 수 있다.</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        int[] result = {0, 0};
        method(1, 2, result);
        Log.d("TAG", "result[0]: " + result[0] + ", " + "result[1]: " + result[1]);
    }						   // result[0]: 3, result[1]: -1

    public void method(int a, int b, int[] result) {
        result[0] = a + b;
        result[1] = a - b;
    }
}
{% endhighlight %}<p></p>

<br>
<br>
<br>
참고 서적: 자바의 정석 3판
