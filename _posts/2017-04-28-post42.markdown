---
layout: post
title:  "객체지향 프로그래밍 - JVM의 메모리 구조"
date:   2017-04-28 10:00:00 +0900
author: 민갤
description: JAVA 객체지향 프로그래밍02 - JVM의 메모리 구조
keywords : android,java,androidstudio,JVM,선언,class,요소,언어,자바의 정석,프로그래밍,클래스,객체,Java Virtual Machine
image : /img/java.png
category : java
---

<div><strong class="h2">Java Virtual Machine</strong></div><p></p>

<div>자바 가상 머신</div>
<div>응용프로그램이 실행되면 시스템으로부터 프로그램을 수행하는데 필요한 메모리를 할당받아 용도에 따라 여러 영역으로 나누어 관리한다.</div> 

|Method Area|Call Stack|Heap|
|:-:|:-:|:-:|
|클래스 데이터|메서드 작업|인스턴스|

<br>

<div><strong>메서드 영역 Method Area</strong></div><p></p>
<div>클래스에 대한 정보, 클래스 변수를 저장.</div>
<div>어떠한 클래스가 사용되면, 해당 클래스의 클래스파일(*.class)을 읽고 분석한 정보를 저장한다.</div>	 
<br>
	
<div><strong>호출 스택 Call Stack / Execution Stack</strong></div><p></p>
<div>메서드 작업 영역.</div><p></p>

<div>&#149;&nbsp; 메서드의 작업에 필요한 메모리 공간을 제공한다.</div>
<div>&nbsp; &nbsp; 메서드가 작업을 수행하는 동안 지역변수(매개변수 포함)들과 연산의 중간결과 등을 저장한다.</div>
<div>&nbsp; &nbsp; 호출된 메서드는 수행에 필요한 만큼만 메모리를 스택에 할당 받는다.</div>
<div>&nbsp; &nbsp; 작업이 끝나면 메모리를 반환하고 스택에서 제거된다.</div><p></p>
<div>&#149;&nbsp; 위치</div>
<div>&nbsp; &nbsp; 호출스택의 제일 상위에 위치하는 메서드가 현재 실행 중인 메서드다. 나머지는 대기 상태에 있게 된다.</div>
<div>&nbsp; &nbsp; 아래에 있는 메서드가 바로 위에 메서드를 호출한 메서드다.</div>

<p class="t_center w80"><amp-img src="{{ "/img/post42/post42.png" | prepend: site.baseurl }}" alt="Call Stack " width="1158" height="192" layout="responsive"></amp-img>

<div><strong>힙 Heap</strong></div><p></p>
<div>인스턴스 변수 저장</div>
<div>모든 인스턴스가 생성되는 공간</div>
<br>
<br>
<br>

<div><strong class="h2">선언 위치에 따른 변수 종류</strong></div>
<br>

<div><strong>인스턴스 변수 instance variable</strong></div><p></p>
<div>클래스 영역에 선언.</div>
<div>독립적인 저장공간을 가진다.</div>
<div>인스턴스마다 고유한 상태를 유지해야 하는 속성의 경우 사용한다.</div>
<div>인스턴스가 생성될 때마다 생성되어 각 인스턴스마다 각기 다른 값을 유지한다.</div>
{% highlight java %}
class Variables{
	int iv;
}		 
{% endhighlight %}<br>
	
<div><strong>클래스 변수 class variable</strong></div><p></p>
<div>앞에 static을 단 인스턴스 변수를 클래스 영역에 선언.</div>
<div>저장공간(변수)을 공유한다.</div>
<div>한 클래스의 모든 인스턴스들이 공통된 값을 유지해야 하는 속성의 경우 사용한다.</div>
<div>' 클래스이름.클래스변수 '와 같은 형식으로 인스턴스를 생성하지 않고 바로 사용할 수 있다.</div>
<div>클래스가 메모리에 로딩될 때 생성된다.</div>
{% highlight java %}
class Variables{
	static int cv;
}	 
{% endhighlight %}<br>

<div><strong>지역 변수 local variable</strong></div><p></p>
<div>메서드 내에 선언.</div>
<div>메서드가 종료되면 소멸된다.</div>
<div>for문/while문의 블럭 내에 선언된 지역변수는, 지역변수가 선언된 블록{} 내에서만 사용 가능하다.</div>
{% highlight java %}
class Variables{
	void method(){
		int lv;
	}
}	 
{% endhighlight %}<br>

<div>인스턴스 변수와 클래스 변수의 차이</div>
{% highlight java %}
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        Variables v1, v2;
        v1 = new Variables();
        v2 = new Variables();

        v1.iv = 3;
        v2.cv = 5;

        Log.d("TAG", v1.iv + ", " + v1.cv);     // 3, 5
        Log.d("TAG", v2.iv + ", " + v2.cv);     // 0, 5
    }
}

public class Variables {
    int iv;
    static int cv;
} 
{% endhighlight %}<p></p>
<br>
<br>
<br>
<br>


<br>

참고 서적: 자바의 정석 3판