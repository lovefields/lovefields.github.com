---
layout: post
title:  "정규식"
date:   2017-05-26 13:00:00 +0900
author: 민갤
description: java.util.regex 패키지
keywords : android,java,androidstudio,class,언어,자바의 정석,프로그래밍,java.util,java.lang,패키지,regex,정규식,Regular Expresstion,java.util.regex
image : /img/java.png
category : java
---
<div><strong class="h2">정규식 Regular Expression</strong></div>
<br>
<br>

<div><strong>package java.util.regex</strong></div><p></p>
<div> java.lang. Object</div>
<div>&nbsp; &nbsp; (classes)</div>
<div>&nbsp; &nbsp; ↳&nbsp; java.util.regex. Matcher (implements java.util.regex. MatchResult)</div>
<div>&nbsp; &nbsp; ↳&nbsp; java.util.regex. Pattern (implements java.io. Serializable)</div>
<div>&nbsp; &nbsp; (Exceptions)</div>
<div>&nbsp; &nbsp; ↳&nbsp; java.lang. Throwable (implements java.io. Serializable)</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ↳&nbsp; java.lang. Exception</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ↳&nbsp; java.lang. RuntimeException</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ↳&nbsp; java.lang. IllegalArgumentException</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ↳&nbsp; java.util.regex. PatternSyntaxException</div>
<div>&nbsp; &nbsp; (Interfaces)</div>
<div>&nbsp; &nbsp; ↳&nbsp; java.util.regex. MatchResult</div>
<br>
<br>

<div><strong>정규식</strong></div><p></p>
<div>텍스트 데이터 중에서 원하는 조건(패턴, pattern)과 일치하는 문자열을 찾아내기 위해 사용하는 것.</div>
<div>미리 정의된 기호와 문자를 이용해서 작성한 문자열.</div><p></p>
<div>&#149;&nbsp; Pattern</div>
<div>&nbsp; &nbsp; 정규식을 정의하는 데 사용.</div>
{% highlight java %}
public final class Pattern implements java.io.Serializable {}
{% endhighlight %}<p></p>
<div>&#149;&nbsp; Matcher</div>
<div>&nbsp; &nbsp; 정규식(패턴)을 데이터와 비교하는 역할.</div>
{% highlight java %}
public final class Matcher implements MatchResult {}
{% endhighlight %}<p></p>
<br>
<br>

<div><strong>정규식을 정의하고 데이터를 비교하는 과정</strong></div><p></p>
<div>1. 정규식 정의 - Pattern 인스턴스 얻기</div>
<div>&nbsp; &nbsp; Pattern 클래스의 static Pattern compile(String regex)을 호출하여 정규식을 매개변수로 전달한다.</div>
{% highlight java %}
Pattern p = Pattern.compile("a[a-z]*");
{% endhighlight %}<p></p>

<div>2. 정규식으로 비교할 대상 정의 - Matcher 인스턴스 얻기</div>
<div>&nbsp; &nbsp; Pattern 클래스의 Matcher matcher(CharSequence input)을 호출하여 비교 대상을 매개변수로 전달한다.</div>
{% highlight java %}
String data[] = {"apple", "ago", "aA", "a0", "a#", "a.", "love", "a", "alpha",
        "avenge", "field", "az", "simulation", "animal", "java", "kotlin", "data"};

for (int i = 0; i < data.length; i++) {
    Matcher m = p.matcher(data[i]);
}
{% endhighlight %}<p></p>

<div>3. 정규식에 부합하는 지 확인</div>
<div>&nbsp; &nbsp; Matcher 인스턴스에 boolean matches() 호출</div>
{% highlight java %}
for (int i = 0; i < data.length; i++) {
    Matcher m = p.matcher(data[i]);
    if(m.matches());
        Log.d("TAG_TEST", data[i]);         // apple  ago  a  alpha  avenge  az  animal
}
{% endhighlight %}
<br>
<br>

<div><strong>정규식 패턴</strong></div><p></p>

<div>&#149;&nbsp; a[a-z]*</div>
<div>&nbsp; &nbsp; a로 시작하는 영단어. 소문자.</div>
{% highlight java %}
Pattern p = Pattern.compile("a[a-z]*");
// apple,ago,a,alpha,avenge,az,animal
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a[a-z]</div>
<div>&nbsp; &nbsp; a로 시작하는 두 자리 영단어. 소문자.</div>
{% highlight java %}
Pattern p = Pattern.compile("a[a-z]");
// az
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a[a-zA-Z]</div>
<div>&nbsp; &nbsp; a로 시작하는 두 자리 영단어. 대소문자 구분 없음.</div>
{% highlight java %}
Pattern p = Pattern.compile("a[a-zA-Z]");
// aA,az
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a[a-zA-Z0-9] 또는 a\w</div>
<div>&nbsp; &nbsp; a로 시작하고 숫자와 영어로 조합된 두 글자</div>
{% highlight java %}
Pattern p = Pattern.compile("a\\w");
// aA,a0,az
{% endhighlight %}<p></p>

<div>&#149;&nbsp; .*</div>
<div>&nbsp; &nbsp; 모든 문자열</div>
{% highlight java %}
Pattern p = Pattern.compile(".*");
// apple,ago,aA,a0,a#,a.,love,a,alpha,avenge,field,az,simulation,animal,java,kotlin,data
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a.</div>
<div>&nbsp; &nbsp; a로 시작하는 두 자리 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("a.");
// aA,a0,a#,a.,az
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a.*</div>
<div>&nbsp; &nbsp; a로 시작하는 모든 문자열. 기호 포함.</div>
{% highlight java %}
Pattern p = Pattern.compile("a.*");
// apple,ago,aA,a0,a#,a.,a,alpha,avenge,az,animal
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a\.</div>
<div>&nbsp; &nbsp; a.와 일치하는 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("a\\.");
// a.
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a\d 또는 a[0-9]</div>
<div>&nbsp; &nbsp; a와 숫자로 구성된 두 자리 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("a\\d");
// a0
{% endhighlight %}<p></p>

<div>&#149;&nbsp; a.*e</div>
<div>&nbsp; &nbsp; a로 시작하고 e로 끝나는 모든 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("a.*t");
// apple,avenge
{% endhighlight %}<p></p>

<div>&#149;&nbsp; [l|f].* 또는 [lf].* 또는 [l-f].*</div>
<div>&nbsp; &nbsp; l 또는 f로 시작하는 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("[l|f].*");
// love,field
{% endhighlight %}<p></p>

<div>&#149;&nbsp; [^l|f].* 또는 [^lf].* 또는 [^l-f].*</div>
<div>&nbsp; &nbsp; l 또는 f로 시작하지 않는 문자열.</div>
{% highlight java %}
Pattern p = Pattern.compile("[^lf].*");
// apple,ago,aA,a0,a#,a.,a,alpha,avenge,az,simulation,animal,java,kotlin,data
{% endhighlight %}<p></p>

<div>&#149;&nbsp; .*n.*</div>
<div>&nbsp; &nbsp; n을 포함하는 모든 문자열.</div>
<div>&nbsp; &nbsp; * :&nbsp; 0 또는 그 이상의 문자</div>
{% highlight java %}
Pattern p = Pattern.compile(".*n.*");
// avenge,simulation,animal,kotlin
{% endhighlight %}<p></p>

<div>&#149;&nbsp; .*n.+</div>
<div>&nbsp; &nbsp; n을 포함하는 모든 문자열.</div>
<div>&nbsp; &nbsp; + :&nbsp; 1 또는 그 이상의 문자. 반드시 하나 이상의 문자가 있어야 한다.</div>
<div>&nbsp; &nbsp; n으로 끝나는 단어는 포함되지 않는다.</div>
{% highlight java %}
Pattern p = Pattern.compile(".*n.+");
// avenge,animal
{% endhighlight %}<p></p>

<div>&#149;&nbsp; [l|j].{3}</div>
<div>&nbsp; &nbsp; l 또는 j로 시작하는 네 자리 문자열</div>
{% highlight java %}
Pattern p = Pattern.compile("[l|j].{3}");
//love,java
{% endhighlight %}
<br>
<br>

<div><strong>그룹화</strong></div><p></p>
<div>정규식의 일부를 괄호()로 나누어 묶는다.</div>
<div>그룹화된 부분은 group(int i)를 이용해서 나누어 얻을 수 있다.</div>
<div>group()/group(0)은 그룹으로 매칭된 문자열을 전체를 나누지 않은 채로 반환한다.</div>
{% highlight java %}
String source = "PONE: 010-3434-5555, HOME:031-234-8888";
String pattern = "(0\\d{1,2})-(\\d{3,4})-(\\d{4})";

Pattern p = Pattern.compile(pattern);
Matcher m = p.matcher(source);

while (m.find()) {
    Log.d("TAG_TEST", m.group());
    Log.d("TAG_TEST", m.group(1) + " / " + m.group(2) + " / " + m.group(3));
}
{% endhighlight %}
{% highlight java %}
010-3434-5555
010 / 3434 / 5555
031-234-8888
031 / 234 / 8888
{% endhighlight %}<p></p>
<div>0\\d{1,2} :&nbsp; 0으로 시작하는 최소 2자리 최대 3자리 숫자. 0포함</div>
<div>\\d{3,4} :&nbsp; 최소 3자리 최대 4자리의 숫자</div>
<div>\\d{4} :&nbsp; 4자리의 숫자</div>
<br>
<br>

<div><strong>Matcher의 boolean find()</strong></div><p></p>
<div>주어진 소스 내에서 패턴과 일치하는 부분을 찾아내면 true 반환.</div>
<div>다시 호출하면 이전에 발견한 패턴과 일치하는 부분의 다음부터 다시 패턴 매칭을 시작한다.</div><p></p>
<div>&#149;&nbsp; 정규식와 일치하는 부분을 찾았을 경우 (<span class="red">find()==true</span>)</div>
<div>&nbsp; &nbsp; int start() :&nbsp; 매칭된 문자열의 시작 위치 반환.</div>
<div>&nbsp; &nbsp; int end() :&nbsp; 매칭된 문자열의 끝 다음 문자의 위치 반환.</div>
<div>&nbsp; &nbsp; Matcher appendReplacement(StringBuffer sb, String replacement) :&nbsp; source 시작부터 원하는 문자열로 치환된 위치까지의 내용을 저장한다.</div>
<div>&nbsp; &nbsp; StringBuffer appendTail(StringBuffer sb) :&nbsp; 마지막으로 치환된 이후의 부분을 sb에 덧붙인다.</div>
{% highlight java %}
String source = "The friendship that can cease has never been real.";
String pattern = "friendship";
StringBuffer sb = new StringBuffer();

Pattern p = Pattern.compile(pattern);
Matcher m = p.matcher(source);

while (m.find()) {
    Log.d("TAG_TEST", m.start() + " ~ " + m.end());   //  4 ~ 14
    m.appendReplacement(sb, "love");
    Log.d("TAG_TEST", sb + "");                       // The love
}
m.appendTail(sb);

Log.d("TAG_TEST", sb + "");                           // The love that can cease has never been real.
{% endhighlight %}


<br>
<br>
<br>
&#149;&nbsp; 참고 서적: 자바의 정석 3판