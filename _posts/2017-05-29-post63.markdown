---
layout: post
title:  "package java.util 01"
date:   2017-05-29 09:00:00 +0900
author: 민갤
description: package java.util 01
keywords : android,java,androidstudio,method,선언,class,요소,언어,자바의 정석,프로그래밍,java.util,java.lang,패키지
image : /img/java.png
category : java
---
<div><strong class="h2">package java.util</strong></div>
<br>
<br>

<div><strong class="h2">java.util.Objects 클래스</strong></div>
<div>Object 클래스의 보조 클래스</div>
<div>객체의 비교나 널 체크null check에 유용하다.</div><p></p>

<div><strong>static boolean isNull(Object obj)</strong></div>
<div>해당 객체가 null인지 확인하여 맞으면 true, 아니면 false 반환.</div><p></p>

<div><strong>static boolean nonNull(Object obj)</strong></div>
<div>!Object.isNull(obj)과 동일.</div><p></p>

<div><strong>requireNonNull()</strong></div>
<div>&#149;&nbsp; static &lt;T&gt; requireNonNull(T obj)</div>
<div>&#149;&nbsp; static &lt;T&gt; requireNonNull(T obj, String message)</div>
<div>&#149;&nbsp; static &lt;T&gt; requireNonNull(T obj, Supplier&lt;String&gt; messageSupplier)</div>
<div>해당 객체가 null이 아니어야 하는 경우에 사용.</div>
<div>객체가 null이면 NullPointerException을 발생시킨다.</div>
<div>두 번째 매개변수로 지정하는 문자열은 예외의 메시지가 된다.</div><p></p>

<div><strong>static int compare(Object a, Object b, Comparator c)</strong></div>
<div>두 객체를 대소 비교하는 메서드.</div>
<div>두 비교대상이 같으면 0, 크면 양수, 작으면 음수를 반환한다.</div><p></p>

<div><strong>static boolean equals(Object a, Object b)</strong></div>
<div>매개변수의 값이 null인지 확인하는 코드가 포함되어 있다.</div>
<div>a와 b가 모두 null인 경우, 참을 반환한다.</div><p></p>

<div><strong>static boolean deepEquals(Object a, Object b)</strong></div>
<div>객체를 재귀적으로 비교하기 때문에 다차원 배열의 비교도 가능하다.</div><p></p>

<div><strong>static String toString(Object o)</strong></div>
<div><strong>static String toString(Object o, String nullDefault)</strong></div>
<div>내부적으로 null을 검사한다.</div>
<div>두 번째 메서드는 o가 null일 때, 대신 사용할 값을 지정할 수 있다.</div><p></p>

<div><strong>static int hashCode(Object o)</strong></div>
<div><strong>static int hash(Object... values)</strong></div>
<div>내부적으로 null을 검사한다.</div>
<div>null이면 0을 반환한다.</div>
<div>두 번째 메서드는 클래스에 선언된 인스턴스의 변수들의 hashCode()를 조합해서 반환하도록 </div>
<div>hashCode()를 오버라이딩할 때 대신 사용하면 편리하다.</div>
<br>
<br>
<br>

<div><strong class="h2">java.util.Random 클래스</strong></div>
<div>난수를 얻을 수 있다.</div>
<div>종자값이 같은 Random 인스턴스들은 항상 같은 난수를 같은 순서대로 반환한다.</div><p></p>

<div><strong>Random()</strong></div>
<div>Random 인스턴스 생성.</div>
<div>종자값seed이 System.currentTimeMillis()로 되어 있어 실행할 때마다 얻는 난수가 달라진다.</div>
<div>&#149;&nbsp; System.currentTimeMillis() :&nbsp; 현재 시간을 천분의 1초 단위로 변환해서 반환한다.</div>
{% highlight java %}
public Random(){
    this(System.currentTimeMillis());       // Random(long seed)
}
{% endhighlight %}<p></p>

<div><strong>Random(long seed)</strong></div>
<div>매개변수 seed를 종자값으로 이용하는 Random 인스턴스를 생성한다.</div><p></p>

<div><strong>boolean nextBoolean()</strong></div>
<div>boolean타입의 난수를 반환.</div><p></p>

<div><strong>void nextBytes(byte[] bytes)</strong></div>
<div>bytes 배열에 byte 타입의 난수를 채워서 반환.</div><p></p>

<div><strong>double nextDouble()</strong></div>
<div>double 타입의 난수를 반환.</div>
<div>0.0 <= x < 1.0</div><p></p>

<div><strong>float nextFloat()</strong></div>
<div>float 타입의 난수를 반환.</div>
<div>0.0 <= x < 1.0</div><p></p>

<div><strong>double nextGaussin()</strong></div>
<div>평균은 0.0, 표준편차는 1.0인 가우시안 분포에 따른 double형의 난수를 반환.</div><p></p>

<div><strong>int nextInt()</strong></div>
<div>int타입의 난수를 반환.</div>
<div>int의 범위.</div><p></p>

<div><strong>int nextInt(int n)</strong></div>
<div>0 ~ n의 범위에 있는 int값을 반환.</div>
<div>n은 범위에 포함되지 않음.</div><p></p>

<div><strong>long nextLong()</strong></div>
<div>long타입의 난수를 반환.</div>
<div>long의 범위.</div><p></p>

<div><strong>void setSeed(long seed)</strong></div>
<div>종자값을 주어진 값으로 변경.</div>
<br>
<br>
<br>

<div><strong class="h2">java.util.Scanner 클래스</strong></div>
<div>화면, 파일, 문자열과 같은 입력소스로부터 문자 데이터를 읽어오는 데 도움을 줄 목적으로 JDK1.5부터 추가.</div>
<div>정규식 표현을 이용한 라인 단위의 검색 지원.</div>
<div>복잡한 형태의 구분자로 처리 가능</div>
<div>JDK1.6부터 화면 입출력만 전문적으로 담당하는 java.io.Console 추가.</div>
<div>두 클래스는 사용법이나 성능측면에서 거의 같다.</div>
<div>실제 입력된 데이터 형식에 맞는 메서드를 사용해야 한다.</div>
{% highlight java %}
boolean nextBoolean()
byte nextByte()
short nextShort()
int nextInt()
long nextLong()
double nextDouble()
float nextFloat()
String nextLine()
{% endhighlight %}
{% highlight java %}
// * EditPlus example
Scanner scan = new Scanner(System.in);
String input1 = scan.nextLine();

Console console = System.console();
String input2 = console.readLine();

System.out.println(input1 +" / " + input2);
{% endhighlight %}
<br>
<br>
<br>

<div><strong class="h2">java.util.StringTokenizer 클래스</strong></div>
<div>긴 문자열을 지정된 구분자Delimiter를 기준으로 토큰Token이라는 여러 개의 문자열로 잘라내는 데 사용된다.</div>
<div>간단하고 명확한 결과를 얻을 수 있어 정규식 표현에 익숙하지 않은 경우 사용한다.</div>
<div>단, 구분자로 단 하나의 문자 밖에 사용하지 못한다.</div>
{% highlight java %}
String source = "10x=2*(1+y)-4";
String delim = "+-*/()=";
StringTokenizer st = new StringTokenizer(source, delim);

while (st.hasMoreTokens()) {
    Log.d("TAG_TEST", st.nextToken());           // 10x  2  1  y  4
}
{% endhighlight %}<p></p>
<div>여러 문자들을 구분자로 지정했을 때 각각의 문자가 구분자로 사용된다.</div><p></p>

<div><strong>StringTokenizer(String str, String delim)</strong></div>
<div>문자열을 지정된 구분자로 나누는 StringTokenizer를 생성한다.</div>
<div>구분자는 토큰으로 간주되지 않는다.</div>
<p></p>

<div><strong>StringTokenizer(String str, String delim, boolean returnDelims)</strong></div>
<div>문자열을 지정된 구분자로 나누는 StringTokenizer를 생성한다.</div>
<div>returnDelims의 값을 true로 하면 구분자로 토큰으로 간주된다.</div>
{% highlight java %}
String source = "10x=2*(1+y)-4";
String delim = "+-*/()=";
StringTokenizer st = new StringTokenizer(source, delim, true);

while (st.hasMoreTokens()) {
    Log.d("TAG_TEST", st.nextToken());           // 10x  =  2  *  (  1  +  y  )  -  4
}
{% endhighlight %}<p></p>

<div><strong>int countTokens()</strong></div>
<div>전체 토큰의 수를 반환한다.</div>
<p></p>

<div><strong>boolean hasMoreTokens()</strong></div>
<div>토큰이 남아있는지 알려준다.</div>
<p></p>

<div><strong>String nextToken()</strong></div>
<div>다음 토큰을 반환한다.</div>
<p></p>

<div><strong>split() vs. StringTokenizer</strong></div>
{% highlight java %}
String source = "1,2, ,,5,6";
String delim = ",";

String[] sp = source.split(",");
StringTokenizer st = new StringTokenizer(source, delim);

for (int i = 0; i < sp.length; i++) {
    Log.d("TAG_TEST", sp[i]);                    // 1|2| ||5|6

int i = 0;
for (; st.hasMoreTokens(); i++) {
    Log.d("TAG_TEST", st.nextToken());           // 1|2| |5|6
}

Log.d("TAG_TEST", sp.length + "");               // 6
Log.d("TAG_TEST", i + "");                       // 5
{% endhighlight %}
{% highlight java %}
D/TAG_TEST: 1-
D/TAG_TEST: 2-
D/TAG_TEST:  -
D/TAG_TEST: -
D/TAG_TEST: 5-
D/TAG_TEST: 6-

D/TAG_TEST: 1
D/TAG_TEST: 2
D/TAG_TEST:  
D/TAG_TEST: 5
D/TAG_TEST: 6
{% endhighlight %}<p></p>
<div>StringTokenizer는 빈 문자열을 토큰으로 인식하지 않는다.</div>
<div>split()은 데이터를 토큰으로 잘라낸 결과를 배열에 담아서 반환하기 때문에 많은 양의 데이터를 다룰 경우,</div>
<div>데이터를 토큰으로 바로바로 잘라서 반환하는 StringTokenizer보다 성능이 떨어진다.</div>

<br>
<br>
<br>
&#149;&nbsp; 참고 서적: 자바의 정석 3판
