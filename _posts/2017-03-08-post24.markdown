---
layout: post
title:  "RecyclerView Swipe Delete"
date: 2017-03-08 10:00:00 +0900
author: 민갤
description: RecyclerView Item을 Swipe 동작을 통해 Delete
keywords : Android Studio,Android,Studio,App,RecyclerView,Swipe,delete,Touch,List
category : android
---

<br>

<strong class="h2">activity_swipe_delete.xml</strong>
{% highlight xml %}
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFFFFFFF"
    android:orientation="vertical">

        <android.support.v7.widget.RecyclerView
            android:id="@+id/recycler_view"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:paddingLeft="16dp"
            />
</RelativeLayout>
{% endhighlight %}
<br>

<strong class="h2">list_item.xml</strong>
{% highlight xml %}
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="48dp">

    <TextView
        android:id="@+id/tv"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="center_vertical"
        android:padding="4dp"/>
</FrameLayout>
{% endhighlight %}
<br>

<strong class="h2"> SwipeDeleteActivity.java </strong>
{% highlight java %}
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.view.View;

import java.util.ArrayList;
import java.util.List;

public class SwipeDeleteActivity extends AppCompatActivity {
    List list;
    RecyclerView re;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_swipe_delete);

        re = (RecyclerView) findViewById(R.id.recycler_view);
        re.setLayoutManager(new LinearLayoutManager(this));
        re.setAdapter(new SwipeDeleteAdapter(setDateList()));
        re.setHasFixedSize(true); // 크기 고정
        setItemTouchHelper();

    }

    private List setDateList() {
        list = new ArrayList<>();
        for (int i = 0; i < 15; i++) {
            list.add("List"+i);
        }

        return list;
    }

    private void setItemTouchHelper() {
        ItemTouchHelper.SimpleCallback simpleItemTouchCallback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
            // ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT | ItemTouchHelper.DOWN | ItemTouchHelper.UP
            // 하면 상하좌우 다 움직임

            Drawable background, mark;
            int markMargin;

            // 드래그 할 때 호출
            @Override
            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                return false;
            }

            // 제공된 ViewHolder 의 Swipe 방향을 반환
            @Override
            public int getSwipeDirs(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
                return super.getSwipeDirs(recyclerView, viewHolder);
            }

            // 사용자가 Swipe 할 때 호출
            @Override
            public void onSwiped(RecyclerView.ViewHolder viewHolder, int swipeDir) {
                int swipedPosition = viewHolder.getAdapterPosition();
                SwipeDeleteAdapter adapter = (SwipeDeleteAdapter) re.getAdapter();
                adapter.remove(swipedPosition);
            }

            // RecyclerView 의 onDraw 호출
            @Override
            public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
                View itemView = viewHolder.itemView;

                if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
                    View itemView = viewHolder.itemView;

                    mark = ContextCompat.getDrawable(context, R.drawable.ic_remove_24dp);
                    mark.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP);
                    markMargin = (int) context.getResources().getDimension(R.dimen.ic_remove_margin);
    
                    // Item 을 좌측으로 Swipe 했을 때 Background 변화: ItemTouchHelper.LEFT
                    if (dX < 1) {
                        background = new ColorDrawable(Color.parseColor("#FFD32F2F"));
                        background.setBounds(itemView.getRight() + (int) dX, itemView.getTop(), itemView.getRight(), itemView.getBottom()); 
			//dX(dY): 사용자 동작에 의한 수평(수직) 변화의 양
                        background.draw(c); //Bounds: 범위. draw: 그리기. - 사용자 동작에 따라 Item 의 Background 변화

                        // Mark 그리기
                        int itemHeight = itemView.getBottom() - itemView.getTop(); // Item 높이
                        int markWidth = mark.getIntrinsicWidth(); // Intrinsic: 본질적 - xMark 의 실제 길이
                        int markHeight = mark.getIntrinsicHeight();

                        int markLeft = itemView.getRight() - markMargin - markWidth;
                        int markRight = itemView.getRight() - markMargin;
                        int markTop = itemView.getTop() + (itemHeight - markHeight) / 2;
                        int markBottom = markTop + markHeight;
                        mark.setBounds(markLeft, markTop, markRight, markBottom);
                        mark.draw(c);
                    } else { // ItemTouchHelper.RIGHT
                        background = new ColorDrawable(Color.parseColor("#FF388E3C"));
                        background.setBounds(itemView.getLeft(), itemView.getTop(), itemView.getLeft() + (int) dX, itemView.getBottom());
                        background.draw(c);
                    }
                }
                super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
            }

        };
        ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(simpleItemTouchCallback);
        mItemTouchHelper.attachToRecyclerView(re);
    }
}
{% endhighlight %}
<br>

<strong class="h2"> SwipeDeleteAdapter.java </strong>
{% highlight java %}
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import java.util.List;

public class SwipeDeleteAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
    private List<String> items;
    private String item = "";

    public SwipeDeleteAdapter(List items) {
        this.items = items;
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
        return new SwipeHolder(inflater.inflate(R.layout.list_item, parent, false));
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        final SwipeHolder viewHolder = (SwipeHolder) holder;
        viewHolder.tv.setText(items.get(position));
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    private class SwipeHolder extends RecyclerView.ViewHolder {
        TextView tv;

        public SwipeHolder(View itemView) {
            super(itemView);
            tv = (TextView) itemView.findViewById(R.id.tv);
        }
    }

    public void remove(int position) {
            items.remove(position);
            notifyItemRemoved(position); 
        }
    }
}
{% endhighlight %}
RecyclerView를 갱신할 때 사용하는 메소드는 여러 가지가 있다.<br>
&#149; notifyDataSetChanged(): 데이터가 전부 바뀌었을 경우. <br>
&#149; notifyItemChanged(int position): 특정 Position의 데이터만 바뀌었을 경우.<br>
&#149; notifyItemInserted(int position): 특정 Position에 데이터가 새로 추가되었을 경우.<br>
&#149; notifyItemRemoved(int position): 특정 Position의 데이터가 제거되었을 경우.<br>
&#149; notifyItemMoved(int fromPosition, int toPosition): fromPosition이 toPosition으로 이동된 경우.<br>
&#149; notifyItemRangeChanged(int positionStart, int itemCount)처럼 Range라는 글자가 사이에 들어가면<br>
&nbsp; 하나의 특정 데이터만 갱신하는 위 메소드들과 달리 특정 영역의 데이터들을 갱신한다.<br>
&nbsp; positionStart에 지정된 Position부터 itemCount만큼의 데이터가 변경되었음을 알린다.<br>
<br>

<strong class="h2">dimens.xml</strong>
{% highlight xml %}
<resources>
    <dimen name="ic_remove_margin">16dp</dimen>
</resources>
{% endhighlight %}
<br>

<strong class="h2">ic_remove_24dp.xml</strong>
{% highlight xml %}
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="24dp"
        android:height="24dp"
        android:viewportHeight="24.0"
        android:viewportWidth="24.0">
    <path
        android:fillColor="#FFFFFFFF"
        android:pathData="M19,13H5v-2h14v2z"/>
</vector>
{% endhighlight %}

<br>



참고 사이트 - [1번], [2번]

[1번]: https://www.learn2crack.com/2016/02/custom-swipe-recyclerview.html
[2번]: https://github.com/nemanja-kovacevic/recycler-view-swipe-to-delete/blob/master/app/src/main/java/net/nemanjakovacevic/recyclerviewswipetodelete/MainActivity.java
