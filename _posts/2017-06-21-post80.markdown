---
layout: post
title:  "LinkedList"
date:   2017-06-21 12:00:00 +0900
author: 민갤
description: Collection Framework 03 - LinkedList
keywords : android,java,androidstudio,method,선언,class,요소,언어,자바의 정석,프로그래밍,Collection,Framework,ArrayList,LinkedList
image : /img/java.png
category : java
---
<div><strong class="h2">Collection Framework</strong></div><p></p>
<div>데이터 군을 저장하는 클래스들을 표준화한 설계</div>
<div>컬렉션 Collection :&nbsp; 다수의 데이터. 데이터 그룹</div>
<div>프레임웍 Framework :&nbsp; 표준화된 프로그래밍 방식.</div>

<br>
<br>
<br>
<br>

<div><strong class="h2">LinkedList</strong></div><p></p>
<div>배열의 단점을 보완하기 위해 고안된 자료 구조.</div>
<div>불연속적으로 존재하는 데이터를 서로 연결한 형태로 구성.</div>
<br>
<br>
<br>

<div><strong>구성</strong></div><p></p>
<div>각 요소들은 자신과 연결된 다음 요소에 대한 참조(주소값)와 데이터로 구성되어 있다.</div><p></p>
{% highlight java %}
private static class Node<E> {
       E item;
       Node<E> next;
       Node<E> prev;         // Doubly-LinkedList
}
{% endhighlight %}<p></p>
<div>&#149;&nbsp; array 0x100</div>

|0|1|2|3|4|

<div>&#149;&nbsp; LinkedList 0x200</div>

|0x200|0x300|0x350|0x370|0x400|
|:-:|:-:|:-:|:-:|:-:|
|0x300|0x350|0x370|0x400|null|
|0|1|2|3|4|

<br>
<br>
<br>

<div><strong>삭제</strong></div><p></p>
<div>삭제하고자 하는 요소의 이전 요소가 삭제하고자 하는 요소의 다음 요소를 참조하도록 변경한다.</div>
<div>단 하나의 참조만 변경하면 되므로 처리 속도가 매우 빠르다.</div>

|0x200|0x300|0x370|0x400|
|:-:|:-:|:-:|:-:|
|0x300|0x370|0x400|null|
|0|1|3|4|

<br>
<br>
<br>

<div><strong>추가</strong></div><p></p>
<div>새로운 요소를 생성한 후 추가하고자 하는 위치의 이전 요소의 참조를 </div>
<div>새로운 요소에 대한 참조로 변경해주고, 새로운 요소가 그 다음 요소를 참조하도록 변경한다.</div>
<div>처리 속도가 매우 빠르다.</div>

|0x200|0x250|0x300|0x370|0x400|
|:-:|:-:|:-:|:-:|:-:|
|0x250|0x300|0x370|0x400|null|
|0|5|1|3|4|

<br>
<br>
<br>

<div><strong>접근성</strong></div><p></p>
<div>이동 방향이 단방향이기 때문에 다음 요소에 대한 접근은 쉽지만, 이전 요소에 대한 접근이 어렵다.</div><br>

<div>&#149;&nbsp; <strong>Doubly-LinkedList</strong></div>
<div>&nbsp; &nbsp; 이중 연결 리스트</div>
<div>&nbsp; &nbsp; LinkedList의 접근성을 보완한 것.</div>
<div>&nbsp; &nbsp; 참조변수를 하나 더 추가하여 이전 요소에 대한 참조가 가능하도록 했을 뿐, 그 외는 LinkedList와 동일하다.</div>
<div>&nbsp; &nbsp; 접근과 이동이 쉽기 때문에 LinkedList보다 많이 사용된다.</div><p></p>
<div>&nbsp; -&nbsp; LinkedList &nbsp;ex) 0x200</div>

|0x200|0x300|0x350|0x370|0x400|
|:-:|:-:|:-:|:-:|:-:|
|0x300|0x350|0x370|0x400|null|
|0|1|2|3|4|

<div>&nbsp; -&nbsp; Doubly-LinkedList &nbsp;ex) 0x200</div>

|0x200|0x300|0x350|0x370|0x400|
|:-:|:-:|:-:|:-:|:-:|
|0x300|0x350|0x370|0x400|null|
|null|0x200|0x300|0x350|0x370|
|0|0|0|0|0|

<br>
<div>&#149;&nbsp; <strong>Doubly Circular LinkedList</strong></div>
<div>&nbsp; &nbsp; 이중 원형 연결 리스트</div>
<div>&nbsp; &nbsp; Doubly-LinkedList보다 접근성을 향상 시킨 것.</div>
<div>&nbsp; &nbsp; 단순히 Doubly-LinkedList의 첫 번째 요소와 마지막 요소를 서로 연결시켰다.</div>
<div>&nbsp; &nbsp; 실제로 LinkedList 클래스는 이름과 달리, 낮은 접근성(accessability)을 높이기 위해 Doubly Circular LinkedList로 구현했다.</div>

|0x200|0x300|0x350|0x370|0x400|
|:-:|:-:|:-:|:-:|:-:|
|0x300|0x350|0x370|0x400|0x200|
|0x400|0x200|0x300|0x350|0x370|
|0|0|0|0|0|

<br>
<br>
<br>

<div><strong>Public constructors</strong></div>

|생성자|설명|
|::-|::-|
|LinkedList()|LinkedList 객체 생성|
|LinkedList(Collection<? extends E> c)|주어진 컬렉션을 포함하는 LinckedList 객체 생성|

<br>
<br>
<br>

<div><strong>Public methods</strong></div><p></p>
<div>List 인터페이스를 구현했기 때문에 ArrayList와 내부구현방법만 다를 뿐 제공하는 메서드의 종류와 기능은 거의 같다.</div>

|반환타입|메서드|설명|
|::-|::-|::-|
|boolean|add(E e)|지정된 객체를 LinkedList의 끝에 추가. 성공하면 true|
|void|add(int index, E element)|지정된 위치에 객체 추가|
|boolean|addAll(Collection<? extends E> c)|주어진 컬렉션에 포함된 모든 요소를 LinkedList의 끝에 추가. 성공하면 true|
|boolean|addAll(int index, Collection<? extends E> c)|지정된 위치에 주어진 컬렉션에 포함된 모든 요소를 추가. 성공하면 true|
|void|addFirst(E e)|LinkedList의 맨 앞에 객체 추가|
|void|addLast(E e)|LinkedList의 맨 끝에 객체 추가|
|void|clear()|LinkedList의 모든 요소를 삭제|
|boolean|contains(Object o)|지정된 객체가 LinkedList에 포함되어있는 지 확인|
|E|element()|LinkedList의 첫 번째 요소 반환|
|E|get(int index)|지정된 위치의 객체를 반환|
|E|getFirst()|LinkedList의 첫 번째 요소 반환|
|E|getLast()|LinkedList의 마지막 요솔 반환|
|int|indexOf(Object o)|지정된 객체가 저장된 위치(앞에서 몇 번째)를 반환|
|int|lastIndexOf(Object o)|지정된 객체의 위치(끝부터 역순)를 반환|
|ListIterator<E>|listIterator(int index)|지정된 위치에서부터 시작하는 ListIterator 반환|
|boolean|offer(E e)|지정된 객체를 LinkedList의 끝에 추가. 성공하면 true|
|boolean|offerFirst(E e)|LinkedList의 맨 앞에 객체 추가. 성공하면 true|
|boolean|offerLast(E e)|LinkedList의 맨 끝에 객체 추가. 성공하면 true|
|E|peek()|LinkedList의 첫 번째 요소를 반환|
|E|peekFirst()|LinkedList의 첫 번째 요소를 반환|
|E|peekLast()|LinkedList의 마지막 요소를 반환|
|E|poll()|LinkedList의 첫 번째 요소를 반환하면서 제거|
|E|pollFirst()|LinkedList의 첫 번째 요소를 반환하면서 제거|
|E|pollLast()|LinkedList의 마지막 요소를 반환하면서 제거|
|E|pop()|LinkedList의 첫 번째 요소 제거|
|void|push(E e)|LinkedList의 맨 앞에 객체 추가|
|E|remove(int index)|지정된 위치의 객체를 LinkedList에서 제거|
|E|remove()|LinkedList의 첫 번째 요소 제거|
|boolean|remove(Object o)|지정된 객체를 LinkedList에서 제거. 성공하면 true|
|E|removeFirst()|LinkedList의 첫 번째 요소 제거|
|boolean|removeFirstOccurrence(Object o)|LinkedList에서 첫 번째로 일치하는 객체를 제거|
|E|removeLast()|LinkedList의 마지막 요소 제거|
|boolean|removeLastOccurrence(Object o)|LinkedList에서 마지막으로 일치하는 객체를 제거|
|E|set(int index, E element)|지정된 위치의 객체를 주어진 객체로 변경|
|int|size()|LinkedList에 저장된 객체의 수를 반환|
|Object[]|toArray()|LinkedList에 저장된 객체를 배열로 반환|
|<T> T[]|toArray(T[] a)|LinkedList에 저장된 객체를 주어진 배열에 저장하여 반환|

<br>
<br>
<br>

<div><strong>ArrayList vs.LinkedList</strong></div><p></p>
<div>&#149;&nbsp; 순차적으로 추가/삭제 (ArrayList의 크기가 충분한 경우)</div>
<div>&nbsp; &nbsp; 작업 속도 :&nbsp; <span class="blue">ArrayList</span> > LinkedList</div>
<div>&nbsp; &nbsp; 만일 ArrayList의 크기가 충분하지 않으면 LinkedList가 더 빠를 수 있다.</div><p></p>
<div>&#149;&nbsp; 중간 데이터를 추가/삭제 (데이터가 많을 경우)</div>
<div>&nbsp; &nbsp; 작업 속도 :&nbsp; ArrayList < <span class="blue">LinkedList</span></div>
<div>&nbsp; &nbsp; 데이터의 개수가 적다면 어느 것을 사용해도 큰 차이가 없다.</div>

|컬렉션|읽기(접근시간)|추가/삭제|비고|
|:-:|:-:|:-:|:-:|
|ArrayList|빠름|느림|순차적인 추가/삭제는 더 빠름. 비효율적인 메모리 사용|
|LinkedList|느림|빠름|데이터가 많을 수록 접근성이 떨어짐|

<br>
<br>
<br>

<div><strong>ArrayList & LinkedList</strong></div><p></p>
<div>다루고자 하는 데이터의 개수가 변하지 않는 다면 ArrayList</div>
<div>데이터 개수의 변경이 잦다면 LinkedList</div><p></p>
<div>&#149;&nbsp; 조합</div>
<div>&nbsp; &nbsp; 처음에 작업하기 전에 데이터를 저장할 때 ArrayList를 사용한 후</div>
<div>&nbsp; &nbsp; 작업할 때 LinkedList로 데이터를 옮겨서 작업하여 효율을 높일 수 있다.</div>
{% highlight java %}
ArrayList al = new ArrayList(100000);
for(int i = 0; i<100000; i++) al.add(i);

LinkedList ll = new LinkedList(al);
for(int i = 0; i<1000; i++) ll.add(500, "x");
{% endhighlight %}<p></p>

<br>
<br>
<br>

&#149;&nbsp; 참고 서적: 자바의 정석 3판 2